name: Deploy to Azure Container Apps

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

env:
  REGISTRY_LOGIN_SERVER: ${{ secrets.REGISTRY_LOGIN_SERVER }}
  RESOURCE_GROUP: ${{ secrets.RESOURCE_GROUP }}
  CONTAINER_APP_NAME: ${{ secrets.CONTAINER_APP_NAME }}
  CONTAINER_APP_ENVIRONMENT: ${{ secrets.CONTAINER_APP_ENVIRONMENT }}

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.25'

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Run tests
      run: go test -v ./...

    - name: Build application
      run: go build -v ./cmd/main.go

  build-and-deploy:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Test DNS Resolution and ACR Connectivity
      run: |
        echo "Testing DNS resolution for ACR..."
        nslookup ${{ env.REGISTRY_LOGIN_SERVER }} || echo "DNS resolution failed"
        echo "Testing Azure DNS connectivity..."
        nslookup microsoft.com 168.63.129.16 || echo "Azure DNS test failed"
        
    - name: Login to ACR with Azure CLI Token
      run: |
        echo "Getting ACR access token..."
        TOKEN=$(az acr login --name tadbapigeneration --expose-token --output tsv --query accessToken)
        echo "Logging into Docker with access token..."
        echo $TOKEN | docker login ${{ env.REGISTRY_LOGIN_SERVER }} --username 00000000-0000-0000-0000-000000000000 --password-stdin

    - name: Build and push Docker image
      run: |
        IMAGE_TAG=${{ env.REGISTRY_LOGIN_SERVER }}/tadb-api:${{ github.sha }}
        echo "Building Docker image: $IMAGE_TAG"
        docker build -t $IMAGE_TAG .
        echo "Pushing Docker image..."
        docker push $IMAGE_TAG
        echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV

    - name: Deploy to Azure Container Apps
      uses: azure/container-apps-deploy-action@v2
      with:
        containerAppName: ${{ env.CONTAINER_APP_NAME }}
        resourceGroup: ${{ env.RESOURCE_GROUP }}
        imageToDeploy: ${{ env.IMAGE_TAG }}
        containerAppEnvironment: ${{ env.CONTAINER_APP_ENVIRONMENT }}
        targetPort: 8080
        ingress: external
      env:
        DB_URI: ${{ secrets.DB_URI }}
        PORT: "8080"
